<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Catch.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        H//8AA///AAP//4ID//+D9///w////8P//8=
</value>
  </data>
</root>